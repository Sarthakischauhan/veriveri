$date
	Fri Oct 11 02:56:45 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ripple_carry_adder_tb $end
$var wire 4 ! Sum [3:0] $end
$var wire 1 " Cout $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 1 % Cin $end
$scope module uut $end
$var wire 4 & A [3:0] $end
$var wire 4 ' B [3:0] $end
$var wire 1 % Cin $end
$var wire 4 ( c [3:0] $end
$var wire 4 ) Sum [3:0] $end
$var wire 1 " Cout $end
$scope begin add_loop[1] $end
$var parameter 2 * i $end
$scope module fadd $end
$var wire 1 + A $end
$var wire 1 , B $end
$var wire 1 - Cin $end
$var wire 1 . Cout $end
$var wire 1 / z $end
$var wire 1 0 y $end
$var wire 1 1 x $end
$var wire 1 2 Sum $end
$scope module hadd1 $end
$var wire 1 + A $end
$var wire 1 , B $end
$var wire 1 0 C $end
$var wire 1 1 Y $end
$upscope $end
$scope module hadd2 $end
$var wire 1 - A $end
$var wire 1 1 B $end
$var wire 1 / C $end
$var wire 1 2 Y $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_loop[2] $end
$var parameter 3 3 i $end
$scope module fadd $end
$var wire 1 4 A $end
$var wire 1 5 B $end
$var wire 1 6 Cin $end
$var wire 1 7 Cout $end
$var wire 1 8 z $end
$var wire 1 9 y $end
$var wire 1 : x $end
$var wire 1 ; Sum $end
$scope module hadd1 $end
$var wire 1 4 A $end
$var wire 1 5 B $end
$var wire 1 9 C $end
$var wire 1 : Y $end
$upscope $end
$scope module hadd2 $end
$var wire 1 6 A $end
$var wire 1 : B $end
$var wire 1 8 C $end
$var wire 1 ; Y $end
$upscope $end
$upscope $end
$upscope $end
$scope module f0 $end
$var wire 1 < A $end
$var wire 1 = B $end
$var wire 1 % Cin $end
$var wire 1 > Cout $end
$var wire 1 ? z $end
$var wire 1 @ y $end
$var wire 1 A x $end
$var wire 1 B Sum $end
$scope module hadd1 $end
$var wire 1 < A $end
$var wire 1 = B $end
$var wire 1 @ C $end
$var wire 1 A Y $end
$upscope $end
$scope module hadd2 $end
$var wire 1 % A $end
$var wire 1 A B $end
$var wire 1 ? C $end
$var wire 1 B Y $end
$upscope $end
$upscope $end
$scope module f1 $end
$var wire 1 C A $end
$var wire 1 D B $end
$var wire 1 E Cin $end
$var wire 1 " Cout $end
$var wire 1 F z $end
$var wire 1 G y $end
$var wire 1 H x $end
$var wire 1 I Sum $end
$scope module hadd1 $end
$var wire 1 C A $end
$var wire 1 D B $end
$var wire 1 G C $end
$var wire 1 H Y $end
$upscope $end
$scope module hadd2 $end
$var wire 1 E A $end
$var wire 1 H B $end
$var wire 1 F C $end
$var wire 1 I Y $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 3
b1 *
$end
#0
$dumpvars
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
02
01
00
0/
0.
0-
0,
0+
b0 )
bz000 (
b0 '
b0 &
0%
b0 $
b0 #
0"
b0 !
$end
#10
b10 !
b10 )
12
1-
bz001 (
1>
1@
1=
1<
b1 $
b1 '
b1 #
b1 &
#20
02
1;
0-
16
b101 !
b101 )
1B
0>
bz010 (
1.
1A
0@
10
1,
0=
1+
b10 $
b10 '
b11 #
b11 &
#30
1I
1/
1E
1-
16
17
0B
1>
02
bz111 (
1.
b1000 !
b1000 )
0;
18
0A
1@
11
00
1:
1=
0+
14
b11 $
b11 '
b101 #
b101 &
#40
1I
1E
17
0;
18
16
1.
02
1/
1-
1?
bz111 (
1>
1"
1A
0@
1G
b1000 !
b1000 )
0B
0=
1D
1C
1%
b1010 $
b1010 '
b1101 #
b1101 &
#50
1;
08
1B
0?
b1111 !
b1111 )
12
0/
0:
19
0A
1@
01
10
15
1=
1+
b1111 $
b1111 '
b1111 #
b1111 &
#60
